스프링 컨테이너는 다양한 형식의 설정 정보를 받아드릴 수 있게 유연하게 설계되어 있다.

결국 xml도 bean을 등록하기 위한 

- XmlAppConfig 사용 자바 코드

```java

@Test
 void xmlAppContext() {
 
 ApplicationContext ac = new GenericXmlApplicationContext("appConfig.xml"); // appConfig.xml 파일이 없기 때문에 오류발생
 
 MemberService memberService = ac.getBean("memberService",MemberService.class);
 
 assertThat(memberService).isInstanceOf(MemberService.class);
 }
}

```

- xml 기반의 스프링 빈 설정 정보

```java

<bean id="memberService" class="hello.core.member.MemberServiceImpl">
  <constructor-arg name="memberRepository" ref="memberRepository" /> // constructor 에는 생성자 이름을 적어주면 된다
</bean>

 <bean id="memberRepository" class="hello.core.member.MemoryMemberRepository" />

 <bean id="orderService" class="hello.core.order.OrderServiceImpl">
   <constructor-arg name="memberRepository" ref="memberRepository" />
   <constructor-arg name="discountPolicy" ref="discountPolicy" />
 </bean>
 
 <bean id="discountPolicy" class="hello.core.discount.RateDiscountPolicy" />
</beans>

```

xml 기반의 appConfig.xml 스프링 설정 정보와 자바 코드로 된 AppConfig.java 설정 정보를 비교해보면 거의 비슷하다는 것을 알 수 있다.
